basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.Product:
    properties:
      code:
        example: A45
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      price:
        example: 200
        maximum: 500
        minimum: 0
        type: integer
      updatedAt:
        type: string
    required:
    - code
    - price
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  view.DataResponse-array_model_Product:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Product'
        type: array
    type: object
  view.DataResponse-model_Product:
    properties:
      data:
        $ref: '#/definitions/model.Product'
    type: object
  view.DataResponse-model_User:
    properties:
      data:
        $ref: '#/definitions/model.User'
    type: object
  view.DataResponse-string:
    properties:
      data:
        type: string
    type: object
  view.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  view.ProductCreate:
    properties:
      code:
        example: A45
        type: string
      price:
        example: 200
        maximum: 500
        minimum: 0
        type: integer
    required:
    - code
    - price
    type: object
  view.TokenResponse:
    properties:
      token:
        type: string
    type: object
  view.UserCreate:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
host: localhost:1323
info:
  contact: {}
  description: Test API
  title: Products API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User Body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/view.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Login
      tags:
      - User
  /products:
    get:
      consumes:
      - '*/*'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.DataResponse-array_model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get a list of products
      tags:
      - Products
    post:
      consumes:
      - application/json
      parameters:
      - description: Product Body
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/view.ProductCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/view.DataResponse-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Insert a product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - '*/*'
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.DataResponse-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Delete a product
      tags:
      - Products
    get:
      consumes:
      - '*/*'
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.DataResponse-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Retrieve a product
      tags:
      - Products
    put:
      consumes:
      - application/json
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: product body
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/view.ProductCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.DataResponse-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update a product
      tags:
      - Products
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User Body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/view.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/view.DataResponse-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Register
      tags:
      - User
schemes:
- http
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
